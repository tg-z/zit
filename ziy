#!/usr/bin/env bash
###############################################################################
# ziy - a zettelkasten management tool
#
# get ziy:
#   https://github.com/tg-z/zit/blob/main/ziy
#
# Dependencies:
#
# For usage information, run:
#   ziy help

###############################################################################

# https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck source=/dev/null

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

DEFAULT_COMMAND="${DEFAULT_COMMAND:-help}"
_HOMEPAGE="https://github.com/tg-z/zit"
_VERSION="0.0.1"
_ME="${0##*/}"
_BUILTIN_COMMANDS=(
  "backlinks"
  "commands"
  "help"
  "init"
  "list"
  "new"
  "open"
  "preview"
  "push"
  "sync"
  "show"
  "tags"
  "version"
)
_command_exists() {
  hash "${1}" 2>/dev/null
}
_function_exists() {
  [[ "$(type -t "${1:-}")" == 'function' ]]
}
_is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}
_contains() {
  local _query="${1:-}"
  shift

  if [[ -z "${_query}"  ]] ||
     [[ -z "${*:-}"     ]]
  then
    return 1
  fi

  for __element in "${@}"
  do
    [[ "${__element}" == "${_query}" ]] && return 0
  done

  return 1
}
_join() {
  local _delimiter="${1}"
  shift
  printf "%s" "${1}"
  shift
  printf "%s" "${@/#/${_delimiter}}" | tr -d '[:space:]'
}
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    {
      # Prefix debug message with "bug (U+1F41B)"
      printf "🐛  %s " "${__DEBUG_COUNTER}"
      "${@}"
      printf "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\\n"
    } 1>&2
  fi
}
_show_info() {
    printf "%s\n" "
        __ __
.-----.|__|  |_
|-- __||  |   _|
|_____||__|____|
${_ME} is a small tool for managing your zettelkasten.

created by tg-z <blue_tooth@zoho.com>
\n"
}

help() {
  cat <<EOF
        __ __
.-----.|__|  |_
|-- __||  |   _|
|_____||__|____|

${_ME} is a small tool for managing your zettelkasten.

Usage:
  zit <cmd> [--cmd-options] [<args>]
  zit -h | --help
  zit -V | --version

Options:
  -h --help        Display this help information.
  -V --version     Display version information and exit.

Help:
  zit help [<cmd>]

Home:
  ${_HOMEPAGE}

Available commands:
  commands
  help
  init
  list
  new
  open
  preview
  push
  sync
  show
  tags
  version
EOF
}

version() {
  printf "%s\\n" "${_VERSION}"
}

_init() {
printf "%s\n" "
        __ __
.-----.|__|  |_
|-- __||  |   _|
|_____||__|____|

${_ME} is a small tool for managing your zettelkasten.
"

  if [ -z "$ZETTEL_DIR" ]; then
	echo "setup your zettel by adding 'export ZETTEL_DIR='~/.local/share/zet'' or add something similar to your zshrc/bashrc."
	echo "by default, the directory is set to ${XDG_DATA_HOME:-$HOME/.local/share}/zet"
  exit 1
  elif [ -d "$ZETTEL_DIR" ]; then
	exit 0
  else 
	echo "you still need to create your zettelkasten directory."
  fi
}

list() {
    cd "${ZETTEL_DIR}"
    fd 20 -e md | sed 's/\([0-9]*\).-*/\1 /' | sed 's/.md//'
}

preview() {
  cd "${ZETTEL_DIR}"
  command -v mlp &> /dev/null
  fd 20 -e md | fzf -m --preview 'glow -s dark {}' --border=rounded --cycle --height '95%' --preview-window='right:70%' --bind='alt-w:toggle-preview-wrap' | xargs mlp && cd
}

tags() {
 awk '/^tags:/ {$1="";print}' "$ZETTEL_DIR"/20* | tr ',' '\n' | awk '{$1=$1}1' | sort -u 
}

sync() {
  cd "${ZETTEL_DIR}"
  git rev-parse HEAD > /dev/null 2>&1
  git commit -am "auto commit + push on $(date)" > /dev/null 2>&1
  echo "committing changes"
  git push
  echo "pushing changes"
}

push() {
  cd "${ZETTEL_DIR}"
  git rev-parse HEAD > /dev/null 2>&1
  git push > /dev/null 2>&1
  echo "changes pushed"
}

_generate() {
  cd "${ZETTEL_DIR}"
  local _id_format
  _id_format="$(date +%Y%m%d%H%M%S)"
  if [[ -f "${_id_format}"-"${1:-new_zettel}".md ]]
  then
    printf ">> zettel already exists in this location.\\n"
    exit 0
  fi

  local _content
  read -r -d '' _content <<TEMPLATE || true
---
id: $(date +%Y%m%d%H%M%S)
title: new_zettel
date: $(date +"%B %d, %Y")
tags:
- $(date +%Y)
---
# new_zettel
TEMPLATE

  printf ">> creating new zettel in %s\\n" "${ZETTEL_DIR}"
  printf "%s\\n" "${_content}" >> "${_id_format}-${1:new_zettel}.md"
  exit 0
}

# Command List ################################################################

# `commands` behaves differently depending on whether this program is sourced
# by a dependent script or whether it's being run directly with commands
# defined in a Baskfile. Since the command list for a dependent script is
# more limited and only includes commands relevant to that script itself, the
# '--group' option is not included.
if _is_sourced
then
  describe "commands" <<HEREDOC
Usage:
  ${_ME} commands --raw
Options:
  --raw      Display the command list without formatting.
Description:
  Display the list of available commands.
HEREDOC
  commands() {
    if [[ "${1:-}" == "--raw" ]]
    then
      printf "%s\\n" "${_DEFINED_COMMANDS[@]}"
    else
      printf "Available commands:\\n"
      printf "  %s\\n" "${_DEFINED_COMMANDS[@]}"
    fi
  }
else
  describe "commands" <<HEREDOC
Usage:
  ${_ME} commands [--raw | --grouped]
  ${_ME} commands alias <name> <alias>
Options:
  --raw      Display the command list without formatting.
  --grouped  Display the list of commands with default and locally defined
             commands in labeled groups.
Subcommands:
  alias      Create an <alias> of a given command <name>, with linked help.
Description:
  Display the list of available commands.
HEREDOC
  commands() {
    case "${1:-}" in
      --raw)
        printf "%s\\n" "${_DEFINED_COMMANDS[@]}"
        ;;
      --grouped)
        printf "Default commands:\\n"
        printf "  %s\\n" "${_BUILTIN_COMMANDS[@]}"

        # Only display local command section when defined tasks are available.
        if [[ -n "${_LOCAL_COMMANDS[*]:-}" ]]
        then
          printf "\\nLocal commands:\\n"
          printf "  %s\\n" "${_LOCAL_COMMANDS[@]:-}"
        fi
        ;;
      alias)
        if [[ -z "${2:-}" ]] || [[ -z "${3:-}" ]]
        then
          _exit_1 _help "commands"
        else
          _alias_subcommand "${2:-}" "${3:-}"
        fi
        ;;
      *)
        printf "Available commands:\\n"
        printf "  %s\\n" "${_DEFINED_COMMANDS[@]}"
        ;;
    esac
  }
fi

new() {
  cd "${ZETTEL_DIR}"
  printf "new() \${PWD}: %s\\n" "${ZETTEL_DIR}"
  _generate "${1}"
}
_init "${@}"



while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  -V | --version )
    version
    exit
    ;;
  -s | --string )
    shift; string=$1
    ;;
  -f | --flag )
    flag=1
    ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi


