#!/usr/bin/env bash
###############################################################################
# zit - a zettelkasten management tool
#
# get bask:
#   https://github.com/xwmx/bask
# get zit:
#   https://github.com/tg-z/zit
#
# add this script and the bask program to your $PATH.
#
# For usage information, run:
#   zit help
###############################################################################

# load bask

# https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck source=/dev/null

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

DEFAULT_COMMAND="${DEFAULT_COMMAND:-help}"

source "$(command -v bask)"

desc "init" <<HEREDOC
Usage:
  $_ME init

Description:
  With no argument, list all notes. Otherwise list notes containing any of the given patterns.
HEREDOC

_command_exists() {
  hash "${1}" 2>/dev/null
}
_function_exists() {
  [[ "$(type -t "${1:-}")" == 'function' ]]
}
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}
_contains() {
  local _query="${1:-}"
  shift

  if [[ -z "${_query}"  ]] ||
     [[ -z "${*:-}"     ]]
  then
    return 1
  fi

  for __element in "${@}"
  do
    [[ "${__element}" == "${_query}" ]] && return 0
  done

  return 1
}
init() {
  echo ">> hi from zit!"
  if [ -z "$ZETTEL_DIR" ]; then
	echo "setup your zettel by adding 'export ZETTEL_DIR='~/.local/share/zet'' or something similar to your zshrc/bashrc."
	echo "by default, the directory is set to ${XDG_DATA_HOME:-$HOME/.local/share/zet}"
  exit 1
  elif [ -d "$ZETTEL_DIR" ]; then
	echo ">> your zettel is set up + ready to go :)"
  else 
	echo ">> you still need to create the directory."
  fi
}

desc tags <<HEREDOC
Usage:
  $_ME tags t|[<tags>]

Description:
  With no argument, list all tags found in notes. Otherwise list all notes containing any of the given tags.
HEREDOC
tags() {
  local _tag="${1:}"
for __arg in "${@:-}"
do

if [ -z "$@" ]; then
  f

  printf "{_tag} %s!\n"
}

_init
