#!/usr/bin/env bash
###############################################################################
# zit - a zettelkasten management tool
#
# get bask:
#   https://github.com/xwmx/bask
# get zit:
#   https://github.com/tg-z/zit
#
# add this script and the bask program to your $PATH.
#
# For usage information, run:
#   zit help
###############################################################################

# load bask

# https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck source=/dev/null

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

DEFAULT_COMMAND="${DEFAULT_COMMAND:-help}"
_VERSION="0.0.1"

source "$(command -v bask)"

desc "init" <<HEREDOC
Usage:
  $_ME init

Description:
  With no argument, checks if ZETTEL_DIR exists. If it has not been set up yet it will create a directory in the XDG_DATA_HOME called zet.
HEREDOC

desc "list" <<HEREDOC
Usage:
  $_ME ls|[list]

Description:
  With no argument, list all notes. Otherwise list notes containing any of the given patterns.
HEREDOC

desc "tags" <<HEREDOC
Usage:
  $_ME t|tags [TAG [TAG ...]]

Description:
  With no argument, list all tags found in notes. Otherwise list all notes containing any of the given tags.
HEREDOC

desc "new" <<HEREDOC
Usage: $_ME n|new <TITLE>

Description:
  Create a new note with the given title.
HEREDOC

desc "sync" <<HEREDOC
Usage: $_ME sync

Description:
  Synchronize ZETTEL_DIR with the git remote, if one is configured.
HEREDOC

desc "preview" <<HEREDOC
Usage: $_ME preview

Description:
  View notes as HTML. Run pip install -U markdown_live_preview
HEREDOC

desc "push" <<HEREDOC
Usage: $_ME push

Description:
  Push local changes to remote.
HEREDOC

desc "complex" <<HEREDOC
Usage:
  $_ME complex [<name>] [--farewell]

Options:
  --farewell  Print "Goodbye, World!"

Description:
  Print the greeting, "Hello, World!"
HEREDOC

_command_exists() {
  hash "${1}" 2>/dev/null
}
_function_exists() {
  [[ "$(type -t "${1:-}")" == 'function' ]]
}
_is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}
_contains() {
  local _query="${1:-}"
  shift

  if [[ -z "${_query}"  ]] ||
     [[ -z "${*:-}"     ]]
  then
    return 1
  fi

  for __element in "${@}"
  do
    [[ "${__element}" == "${_query}" ]] && return 0
  done

  return 1
}
_join() {
  local _delimiter="${1}"
  shift
  printf "%s" "${1}"
  shift
  printf "%s" "${@/#/${_delimiter}}" | tr -d '[:space:]'
}
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    {
      # Prefix debug message with "bug (U+1F41B)"
      printf "🐛  %s " "${__DEBUG_COUNTER}"
      "${@}"
      printf "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\\n"
    } 1>&2
  fi
}

init() {
  echo ">> hi from zit!"
  if [ -z "$ZETTEL_DIR" ]; then
	echo "setup your zettel by adding 'export ZETTEL_DIR='~/.local/share/zet'' or add something similar to your zshrc/bashrc."
	echo "by default, the directory is set to ${XDG_DATA_HOME:-$HOME/.local/share}/zet"
  exit 1
  elif [ -d "$ZETTEL_DIR" ]; then
	echo ">> your zettel is set up + ready to go :)"
  else 
	echo ">> you still need to create the directory."
  fi
}

list() {
    cd "${ZETTEL_DIR}"
    fd 20 -e md | sed 's/\([0-9]*\).-*/\1 /' | sed 's/.md//'
}



preview() {
  cd "${ZETTEL_DIR}"
  command -v mlp &> /dev/null
  fd 20 -e md | fzf -m --preview 'glow -s dark {}' --border=rounded --cycle --height '95%' --preview-window='right:70%' --bind='alt-w:toggle-preview-wrap' | xargs mlp && cd
}

tags() {
 awk '/^tags:/ {$1="";print}' "$ZETTEL_DIR"/20* | tr ',' '\n' | awk '{$1=$1}1' | sort -u 
}

complex() {
  local _greeting="Hello"
  local _name="World"

  for __arg in "${@:-}"
  do
    case "${__arg}" in
      --farewell)
        _greeting="Goodbye"
        ;;
      -*)
        _exit_1 printf "Unexpected option: %s\n" "${__arg}"
        ;;
      *)
        if [[ "${_name}" == "World" ]] && [[ -n "${__arg:-}" ]]
        then
          _name="${__arg}"
        fi
        ;;
    esac
  done

  printf "%s, %s!\n" "${_greeting}" "${_name}"
}

sync() {
  cd "${ZETTEL_DIR}"
  git rev-parse HEAD > /dev/null 2>&1
  git commit -am "auto commit + push on $(date)" > /dev/null 2>&1
  echo "committing changes"
  git push
  echo "pushing changes"
}

push() {
  cd "${ZETTEL_DIR}"
  git rev-parse HEAD > /dev/null 2>&1
  git push > /dev/null 2>&1
  echo "changes pushed"
}
_init

# new

_generate_zettel() {
  local _id_format
  _id_format="$(date +%Y%m%d%H%M%S)"
  if [[ -f "${_id_format}-${1}" ]]
  then
    printf ">> zettel already exists in this location.\\n"
    exit 0
  fi

  local _content
  read -r -d '' _content <<TEMPLATE || true
---
id: $(date +%Y%m%d%H%M%S)
title: ${zettel_title}
date: $(date +"%B %d, %Y")
tags:
- $(date +%Y)
---

# ${zettel_title}

TEMPLATE

  printf ">> creating new zettel in %s\\n" "${ZETTEL_DIR}"
  printf "%s\\n" "${_content}" >> "Baskfile"
  exit 0
}

_generate_zet() {
  if [[ -f "${1:-}" ]]
  then
    printf ">> %s already exists\\n" "${1}"
    exit 0
  fi

  local _script_basename
  _script_basename="$(basename "${1}")"
  _debug printf \
    "_generate_bask_script() \${_script_basename}: %s\\n" \
    "${_script_basename}"

  local _content
  read -r -d '' _content <<TEMPLATE || true
---
id: $(date +%Y%m%d%H%M%S)
title: ${zettel_title}
date: $(date +"%B %d, %Y")
tags:
- $(date +%Y)
---

# ${zettel_title}

TEMPLATE

  printf ">> creating new zet: %s\\n" "${1}"
  printf "%s\\n" "${_content}" >> "${1}"
  exit 0
}

new() {
  printf "new() \${PWD}: %s\\n" "${ZETTEL_DIR}"

  if [[ -n "${1:-}" ]]
  then
    _generate_zet "${1}"
  else
    _generate_zettel
  fi
}
x-new() {
    cd "${ZETTEL_DIR}"
    local zettel_id_format="$(date +%Y%m%d%H%M%S)"
    local ZET_ID="${zettel_id_format}"
    local zettel_title="${1:-new-zettel}"
    local zettel_date_format="$(date +"%B %d, %Y")"
    local zettel_tag_format="$(date +%Y)"
}
