#!/usr/bin/env bash
# shellcheck disable=SC2124

set -e
set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

_ME="${0##*/}"
_VERSION="1.0.1"
_HOMEPAGE="https://github.com/tg-z/zit"
COPY_FILE_FLAG=0
COPY_ID_FLAG=0

[ -z "${EDITOR}" ] && EDITOR="vim"

if [[ -n "${ZETTEL_DIR}" ]]; then
  NOTE_DIR="$ZETTEL_DIR"
else
  NOTE_DIR="./"
fi

_info() {
    # $1: info message
    printf "%b\n" "\033[32mINFO\033[0m ${1}" >&2
}

_warn() {
    # $1: warning message
    printf "%b\n" "\033[33mWARNING\033[0m ${1}" >&2
}

_error() {
    # $1: error message
    printf "%b\n" "\033[31mERROR\033[0m ${1}" >&2
    exit 1
}

_generate(){
  cd "${ZETTEL_DIR}"
  local _content
  read -r -d '' _content <<TEMPLATE || true
---
id: $(date +%Y%m%d%H%M%S)
title: new
date: $(date +"%B %d, %Y")
tags:
- $(date +%Y)
---

# new
TEMPLATE

  printf "creating new zettel in %s\\n" "${ZETTEL_DIR}"
  printf "%s\\n" "${_content}" >> "${note_name}"
  exit 0
}

new() {
  _check
  cd "${ZETTEL_DIR}"
  local id
  id=$(date +"%Y%m%d%H%M%S")
  local note_name
  if [[ "$#" -gt 0 ]]; then
    _note_name="$NOTE_DIR/$id-$@.md"
    note_name="$(echo "${_note_name}" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')"

  else
    note_name="$NOTE_DIR/$id.md"
  fi
  if [[ -f "${note_name}" ]]
  then
    printf "zettel already exists in this location.\\n"
    exit 0
  fi

  touch "$note_name"

  if [[ $COPY_ID_FLAG -eq 1 ]]; then
    _copy "$id"
    echo "${id}"
  fi

  if [[ $COPY_FILE_FLAG -eq 1 ]]; then
    _copy "${note_name}"
    echo "${note_name}"
  fi
  _generate "${1}"
}

_var() {
  _fzf="$(command -v fzf)"
  _ag="$(command -v ag)"
  _fd="$(command -v fd)"
  _bat="$(command -v bat)"
  _mlp="$(command -v mlp)"
}

_check() {
  _var
  if [ ! -x "${_fzf}" ]; then
          echo "you must install fzf to run this command"
          exit 1
  fi
  if [ ! -x "${_ag}" ]; then
      echo "you must install ag to run this command"
      exit 1
  fi
  if [ ! -x "${_fd}" ]; then
          echo "you must install fd to run this command"
          exit 1
  fi
  if [ ! -x "${_bat}" ]; then
          echo "you must install bat to run this command"
          exit 1
  fi
  if [ ! -x "${_mlp}" ]; then
	  echo "you must install mlp to run this command"
	  exit 1
  fi
}

_copy() {
  if [ -x "$(command -v xclip)" ]; then
    echo "${1}" | xclip -selection c
  fi

  if [ -x "$(command -v pbcopy)" ]; then
    echo "${1}" | pbcopy
  fi
}

find_file() {
  _check
  local files="${1}"
  local results
  results=$("${_ag}" -rg "${files}" "${ZETTEL_DIR}")

  if [ ! "${results}" -eq 0 ]; then
    echo "No results were found"
    exit 1
  fi

  if [[ "${COPY_FILE_FLAG}" -gt 1 ]]; then
    _copy "${results}"
  fi

  echo "${results}"
}

find_tag() {
  _check
  local tag="${1}"
  local results
  results=$("${_ag}" -rl --md "${tag}" "${ZETTEL_DIR}")

  if [[ "${COPY_FILE_FLAG}" -eq 1 ]]; then
    _copy "${results}"
  fi

  echo "${results}"
}

list() {
  _check
  cd "${ZETTEL_DIR}"
  local term="${*}"
  local results
  results="$("${_ag}" -rl --md "${term}" | sed 's/\([0-9]*\).-*/\1 /' | sed 's/.md//')"

  if [[ -z "${term}" ]]; then
	  "${_fd}" 20 -e md | sed 's/\([0-9]*\).-*/\1 /' | sed 's/.md//'
  elif [[ -n "${term}" ]]; then
	  echo "${results}"
  fi
}

version() {
  printf "%s %s\n" "${_ME}" "${_VERSION}"
}

sync() {
  _check
  cd "${ZETTEL_DIR}"
  gr="$(git rev-parse --show-toplevel)"
  cd "${gr}" || exit
  # tput setaf 5;pwd;tput sgr0
  if git status | grep -c 'Your branch is ahead' > /dev/null; then
	  git push
  else
	  read -r -p "commit message: " desc
	  git commit -am "${desc}"
	  git push
	  _info "changes synced âœ“"
  fi
}

get_id() {
  local id
  id=$(echo "${1}" | grep -Eo "[[:digit:]]{14}")

  if [[ $COPY_ID_FLAG -eq 1 ]]; then
    _copy "${id}"
  fi

  echo "${id}"
}

_edit() {
    _check
    "${_fd}" 20 -e md | "${_fzf}" -m --preview 'glow -s dark {}' --border=rounded --cycle --height '95%' --preview-window='right:70%' | xargs "${EDITOR}"
}

open() {
    _check
    cd "${ZETTEL_DIR}"
    if [ -z "${1}" ];
    then
	    _edit
    else
    "${_fd}" 20 -e md | rg "${1}" | xargs "${EDITOR}"
    fi
}

preview() {
  _check
  cd "${ZETTEL_DIR}"
  "${_fd}" 20 -e md | "${_fzf}" -m --preview 'glow -s dark {}' --border=rounded --cycle --height '95%' --preview-window='right:70%' | xargs "${_mlp}"
}

_generate_index() {
  cd "${ZETTEL_DIR}"
  local _content
  find 20* -type f > .index
  read -r -d '' _content <<TEMPLATE || true
---
id: $(date +%Y%m%d%H%M%S)
title: index
date: $(date +"%B %d, %Y")
tags:
- $(date +%Y)
---

# index

$(while read -r file; do echo "- [$file]($file)"; done < .index)

TEMPLATE

  printf "%s\\n" "${_content}"
  exit 0
}

index() {
	_generate_index
}

commands() {
    cat <<EOF
Available commands:
  commands
  find
  help
  id
  index
  list
  new
  open
  preview
  show
  sync
  tag
  version
EOF
}

banner() {
  cat <<EOF
       __ __   
.-----|__|  |_ 
|-- __|  |   _|
|_____|__|____|

EOF
}

help() {
banner
cat <<EOF
${_ME} - a small tool for managing your zettelkasten.

Usage:
  ${_ME} <cmd> <options> args
Options:
  -i 	Copy zettel id after running command.
  -f 	Copy zettel location/path after running command.
  -h 	Display this help information.
  -V 	Display version information and exit.
Help:
  ${_ME} help <cmd>
Home:
  ${_HOMEPAGE}
EOF
commands
}

while getopts 'fihV' flag; do
  case "${flag}" in
    f)
      shift
      COPY_FILE_FLAG=1
      ;;
    i)
      shift
      COPY_ID_FLAG=1
      ;;
    h)
      shift
      help
      exit 0
      ;;
     V)
      shift
      version
      exit 0
      ;;
     *) _error "command not found\n" >&2
      false
      ;;
esac
done

case "${1:-help}" in
  ("commands")
    shift
    commands
    ;;
  ("find")
    shift
    find_file "${1}"
    ;;
  ("help")
    shift
    help
    ;;
  ("id")
    shift
    get_id "${1}"
    ;;
  ("index")
    shift
    index
    ;;
  ("list")
    shift
    list "${@}"
    ;;
  ("new")
    shift
    new "${@}"
    ;;
  ("open")
    shift
    open "${@}"
    ;;
  ("preview")
    shift
    preview
    ;;
  ("show")
    shift
    show
    ;;
  ("sync")
    shift
    sync
    ;;
  ("tag")
    shift
    find_tag "${1}"
    ;;
  ("version")
    shift
    printf "%s %s\n" "${_ME}" "${_VERSION}"
    ;;
  *) 
    _error "command not found\n" >&2
    false
    ;;
esac
